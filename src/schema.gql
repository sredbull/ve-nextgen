# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Float!
  provider: String!
  providerId: String!
  username: String!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PageHeadMeta {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  charset: String!
  description: String!
  noindex: Boolean!
  nofollow: Boolean!
  viewport: String!
}

type PageHead {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
  meta: PageHeadMeta!
}

type PageBodyHeader {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  type: String!
}

type CommonA {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  href: String!
  rel: RelEnum!
  target: TargetEnum!
}

enum RelEnum {
  ALTERNATE
  AUTHOR
  BOOKMARK
  EXTERNAL
  HELP
  LICENSE
  NEXT
  NOFOLLOW
  NOREFERRER
  NOOPENER
  PREV
  SEARCH
  TAG
}

enum TargetEnum {
  BLANK
  PARENT
  SELF
  TOP
}

type PageBodyNavigation {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
  items(
    """Specify to filter the records returned."""
    filter: CommonAFilter = {}

    """Specify to sort results."""
    sorting: [CommonASort!] = []
  ): [CommonA!]
}

input CommonAFilter {
  and: [CommonAFilter!]
  or: [CommonAFilter!]
  id: IDFilterComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input CommonASort {
  field: CommonASortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CommonASortFields {
  id
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type PageBodySidebar {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
}

type PageBodyFooter {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  type: String!
}

type PageBodyMain {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
}

type PageBody {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  header: HeaderUnion!
  navigation: PageBodyNavigation!
  main: PageBodyMain!
  sidebar: PageBodySidebar!
  footer: FooterUnion!
}

union HeaderUnion = PageBodyHeaderCurved | PageBodyHeaderSkewed

type PageBodyHeaderCurved {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
  subTitle: String!
}

type PageBodyHeaderSkewed {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
  subTitle: String!
}

union FooterUnion = PageBodyFooterExtended | PageBodyFooterSimple

type PageBodyFooterExtended {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
  subTitle: String!
  copyright: String!
}

type PageBodyFooterSimple {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
  subTitle: String!
  copyright: String!
}

type Page {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  lang: String!
  head: PageHead!
  body: PageBody!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type PageDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  lang: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type PageEdge {
  """The node containing the Page"""
  node: Page!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type PageConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PageEdge!]!
}

type PageAggregateGroupBy {
  id: ID
}

type PageCountAggregate {
  id: Int
}

type PageSumAggregate {
  id: Float
}

type PageAvgAggregate {
  id: Float
}

type PageMinAggregate {
  id: ID
}

type PageMaxAggregate {
  id: ID
}

type PageHeadDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

type PageHeadEdge {
  """The node containing the PageHead"""
  node: PageHead!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageHeadConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PageHeadEdge!]!
}

type PageHeadAggregateGroupBy {
  id: ID
  title: String
}

type PageHeadCountAggregate {
  id: Int
  title: Int
}

type PageHeadSumAggregate {
  id: Float
}

type PageHeadAvgAggregate {
  id: Float
}

type PageHeadMinAggregate {
  id: ID
  title: String
}

type PageHeadMaxAggregate {
  id: ID
  title: String
}

type PageHeadMetaDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  charset: String
  description: String
  noindex: Boolean
  nofollow: Boolean
  viewport: String
}

type PageHeadMetaEdge {
  """The node containing the PageHeadMeta"""
  node: PageHeadMeta!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageHeadMetaConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PageHeadMetaEdge!]!
}

type PageHeadMetaAggregateGroupBy {
  id: ID
}

type PageHeadMetaCountAggregate {
  id: Int
}

type PageHeadMetaSumAggregate {
  id: Float
}

type PageHeadMetaAvgAggregate {
  id: Float
}

type PageHeadMetaMinAggregate {
  id: ID
}

type PageHeadMetaMaxAggregate {
  id: ID
}

type PageBodyDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
}

type PageBodyEdge {
  """The node containing the PageBody"""
  node: PageBody!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageBodyConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PageBodyEdge!]!
}

type PageBodyAggregateGroupBy {
  id: ID
}

type PageBodyCountAggregate {
  id: Int
}

type PageBodySumAggregate {
  id: Float
}

type PageBodyAvgAggregate {
  id: Float
}

type PageBodyMinAggregate {
  id: ID
}

type PageBodyMaxAggregate {
  id: ID
}

type PageBodyHeaderDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  type: String
}

type PageBodyHeaderEdge {
  """The node containing the PageBodyHeader"""
  node: PageBodyHeader!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageBodyHeaderConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PageBodyHeaderEdge!]!
}

type PageBodyHeaderAggregateGroupBy {
  id: ID
}

type PageBodyHeaderCountAggregate {
  id: Int
}

type PageBodyHeaderSumAggregate {
  id: Float
}

type PageBodyHeaderAvgAggregate {
  id: Float
}

type PageBodyHeaderMinAggregate {
  id: ID
}

type PageBodyHeaderMaxAggregate {
  id: ID
}

type PageBodyFooterDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  type: String
}

type PageBodyFooterEdge {
  """The node containing the PageBodyFooter"""
  node: PageBodyFooter!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageBodyFooterConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PageBodyFooterEdge!]!
}

type PageBodyFooterAggregateGroupBy {
  id: ID
}

type PageBodyFooterCountAggregate {
  id: Int
}

type PageBodyFooterSumAggregate {
  id: Float
}

type PageBodyFooterAvgAggregate {
  id: Float
}

type PageBodyFooterMinAggregate {
  id: ID
}

type PageBodyFooterMaxAggregate {
  id: ID
}

type PageBodyMainDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

type PageBodyMainEdge {
  """The node containing the PageBodyMain"""
  node: PageBodyMain!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageBodyMainConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PageBodyMainEdge!]!
}

type PageBodyMainAggregateGroupBy {
  id: ID
}

type PageBodyMainCountAggregate {
  id: Int
}

type PageBodyMainSumAggregate {
  id: Float
}

type PageBodyMainAvgAggregate {
  id: Float
}

type PageBodyMainMinAggregate {
  id: ID
}

type PageBodyMainMaxAggregate {
  id: ID
}

type PageBodyNavigationDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

type PageBodyNavigationEdge {
  """The node containing the PageBodyNavigation"""
  node: PageBodyNavigation!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageBodyNavigationConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PageBodyNavigationEdge!]!
}

type PageBodyNavigationAggregateGroupBy {
  id: ID
}

type PageBodyNavigationCountAggregate {
  id: Int
}

type PageBodyNavigationSumAggregate {
  id: Float
}

type PageBodyNavigationAvgAggregate {
  id: Float
}

type PageBodyNavigationMinAggregate {
  id: ID
}

type PageBodyNavigationMaxAggregate {
  id: ID
}

type PageBodySidebarDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

type PageBodySidebarEdge {
  """The node containing the PageBodySidebar"""
  node: PageBodySidebar!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageBodySidebarConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PageBodySidebarEdge!]!
}

type PageBodySidebarAggregateGroupBy {
  id: ID
}

type PageBodySidebarCountAggregate {
  id: Int
}

type PageBodySidebarSumAggregate {
  id: Float
}

type PageBodySidebarAvgAggregate {
  id: Float
}

type PageBodySidebarMinAggregate {
  id: ID
}

type PageBodySidebarMaxAggregate {
  id: ID
}

type CommonADeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  href: String
  rel: RelEnum
  target: TargetEnum
}

type CommonAEdge {
  """The node containing the CommonA"""
  node: CommonA!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type CommonAConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [CommonAEdge!]!
}

type CommonAAggregateGroupBy {
  id: ID
}

type CommonACountAggregate {
  id: Int
}

type CommonASumAggregate {
  id: Float
}

type CommonAAvgAggregate {
  id: Float
}

type CommonAMinAggregate {
  id: ID
}

type CommonAMaxAggregate {
  id: ID
}

type Query {
  users: [User!]!
  whoAmI: User!
  page(
    """The id of the record to find."""
    id: ID!
  ): Page
  pages(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PageFilter = {}

    """Specify to sort results."""
    sorting: [PageSort!] = []
  ): PageConnection!
  pageHead(
    """The id of the record to find."""
    id: ID!
  ): PageHead
  pageHeads(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PageHeadFilter = {}

    """Specify to sort results."""
    sorting: [PageHeadSort!] = []
  ): PageHeadConnection!
  pageHeadMeta(
    """The id of the record to find."""
    id: ID!
  ): PageHeadMeta
  pageHeadMetas(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PageHeadMetaFilter = {}

    """Specify to sort results."""
    sorting: [PageHeadMetaSort!] = []
  ): PageHeadMetaConnection!
  pageBody(
    """The id of the record to find."""
    id: ID!
  ): PageBody
  pageBodies(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PageBodyFilter = {}

    """Specify to sort results."""
    sorting: [PageBodySort!] = []
  ): PageBodyConnection!
  pageBodyHeader(
    """The id of the record to find."""
    id: ID!
  ): PageBodyHeader
  pageBodyHeaders(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PageBodyHeaderFilter = {}

    """Specify to sort results."""
    sorting: [PageBodyHeaderSort!] = []
  ): PageBodyHeaderConnection!
  pageBodyFooter(
    """The id of the record to find."""
    id: ID!
  ): PageBodyFooter
  pageBodyFooters(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PageBodyFooterFilter = {}

    """Specify to sort results."""
    sorting: [PageBodyFooterSort!] = []
  ): PageBodyFooterConnection!
  pageBodyMain(
    """The id of the record to find."""
    id: ID!
  ): PageBodyMain
  pageBodyMains(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PageBodyMainFilter = {}

    """Specify to sort results."""
    sorting: [PageBodyMainSort!] = []
  ): PageBodyMainConnection!
  pageBodyNavigation(
    """The id of the record to find."""
    id: ID!
  ): PageBodyNavigation
  pageBodyNavigations(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PageBodyNavigationFilter = {}

    """Specify to sort results."""
    sorting: [PageBodyNavigationSort!] = []
  ): PageBodyNavigationConnection!
  pageBodySidebar(
    """The id of the record to find."""
    id: ID!
  ): PageBodySidebar
  pageBodySidebars(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PageBodySidebarFilter = {}

    """Specify to sort results."""
    sorting: [PageBodySidebarSort!] = []
  ): PageBodySidebarConnection!
  commonA(
    """The id of the record to find."""
    id: ID!
  ): CommonA
  commonAS(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: CommonAFilter = {}

    """Specify to sort results."""
    sorting: [CommonASort!] = []
  ): CommonAConnection!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input PageFilter {
  and: [PageFilter!]
  or: [PageFilter!]
  id: IDFilterComparison
}

input PageSort {
  field: PageSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PageSortFields {
  id
}

input PageHeadFilter {
  and: [PageHeadFilter!]
  or: [PageHeadFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input PageHeadSort {
  field: PageHeadSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PageHeadSortFields {
  id
  title
}

input PageHeadMetaFilter {
  and: [PageHeadMetaFilter!]
  or: [PageHeadMetaFilter!]
  id: IDFilterComparison
}

input PageHeadMetaSort {
  field: PageHeadMetaSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PageHeadMetaSortFields {
  id
}

input PageBodyFilter {
  and: [PageBodyFilter!]
  or: [PageBodyFilter!]
  id: IDFilterComparison
}

input PageBodySort {
  field: PageBodySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PageBodySortFields {
  id
}

input PageBodyHeaderFilter {
  and: [PageBodyHeaderFilter!]
  or: [PageBodyHeaderFilter!]
  id: IDFilterComparison
}

input PageBodyHeaderSort {
  field: PageBodyHeaderSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PageBodyHeaderSortFields {
  id
}

input PageBodyFooterFilter {
  and: [PageBodyFooterFilter!]
  or: [PageBodyFooterFilter!]
  id: IDFilterComparison
}

input PageBodyFooterSort {
  field: PageBodyFooterSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PageBodyFooterSortFields {
  id
}

input PageBodyMainFilter {
  and: [PageBodyMainFilter!]
  or: [PageBodyMainFilter!]
  id: IDFilterComparison
}

input PageBodyMainSort {
  field: PageBodyMainSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PageBodyMainSortFields {
  id
}

input PageBodyNavigationFilter {
  and: [PageBodyNavigationFilter!]
  or: [PageBodyNavigationFilter!]
  id: IDFilterComparison
}

input PageBodyNavigationSort {
  field: PageBodyNavigationSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PageBodyNavigationSortFields {
  id
}

input PageBodySidebarFilter {
  and: [PageBodySidebarFilter!]
  or: [PageBodySidebarFilter!]
  id: IDFilterComparison
}

input PageBodySidebarSort {
  field: PageBodySidebarSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PageBodySidebarSortFields {
  id
}

type Mutation {
  setHeadOnPage(input: SetHeadOnPageInput!): Page!
  setBodyOnPage(input: SetBodyOnPageInput!): Page!
  createOnePage(input: CreateOnePageInput!): Page!
  createManyPages(input: CreateManyPagesInput!): [Page!]!
  updateOnePage(input: UpdateOnePageInput!): Page!
  updateManyPages(input: UpdateManyPagesInput!): UpdateManyResponse!
  deleteOnePage(input: DeleteOnePageInput!): PageDeleteResponse!
  deleteManyPages(input: DeleteManyPagesInput!): DeleteManyResponse!
  setMetaOnPageHead(input: SetMetaOnPageHeadInput!): PageHead!
  createOnePageHead(input: CreateOnePageHeadInput!): PageHead!
  createManyPageHeads(input: CreateManyPageHeadsInput!): [PageHead!]!
  updateOnePageHead(input: UpdateOnePageHeadInput!): PageHead!
  updateManyPageHeads(input: UpdateManyPageHeadsInput!): UpdateManyResponse!
  deleteOnePageHead(input: DeleteOnePageHeadInput!): PageHeadDeleteResponse!
  deleteManyPageHeads(input: DeleteManyPageHeadsInput!): DeleteManyResponse!
  createOnePageHeadMeta(input: CreateOnePageHeadMetaInput!): PageHeadMeta!
  createManyPageHeadMetas(input: CreateManyPageHeadMetasInput!): [PageHeadMeta!]!
  updateOnePageHeadMeta(input: UpdateOnePageHeadMetaInput!): PageHeadMeta!
  updateManyPageHeadMetas(input: UpdateManyPageHeadMetasInput!): UpdateManyResponse!
  deleteOnePageHeadMeta(input: DeleteOnePageHeadMetaInput!): PageHeadMetaDeleteResponse!
  deleteManyPageHeadMetas(input: DeleteManyPageHeadMetasInput!): DeleteManyResponse!
  setHeaderOnPageBody(input: SetHeaderOnPageBodyInput!): PageBody!
  setNavigationOnPageBody(input: SetNavigationOnPageBodyInput!): PageBody!
  setMainOnPageBody(input: SetMainOnPageBodyInput!): PageBody!
  setSidebarOnPageBody(input: SetSidebarOnPageBodyInput!): PageBody!
  setFooterOnPageBody(input: SetFooterOnPageBodyInput!): PageBody!
  createOnePageBody(input: CreateOnePageBodyInput!): PageBody!
  createManyPageBodies(input: CreateManyPageBodiesInput!): [PageBody!]!
  updateOnePageBody(input: UpdateOnePageBodyInput!): PageBody!
  updateManyPageBodies(input: UpdateManyPageBodiesInput!): UpdateManyResponse!
  deleteOnePageBody(input: DeleteOnePageBodyInput!): PageBodyDeleteResponse!
  deleteManyPageBodies(input: DeleteManyPageBodiesInput!): DeleteManyResponse!
  createOnePageBodyHeader(input: CreateOnePageBodyHeaderInput!): PageBodyHeader!
  createManyPageBodyHeaders(input: CreateManyPageBodyHeadersInput!): [PageBodyHeader!]!
  updateOnePageBodyHeader(input: UpdateOnePageBodyHeaderInput!): PageBodyHeader!
  updateManyPageBodyHeaders(input: UpdateManyPageBodyHeadersInput!): UpdateManyResponse!
  deleteOnePageBodyHeader(input: DeleteOnePageBodyHeaderInput!): PageBodyHeaderDeleteResponse!
  deleteManyPageBodyHeaders(input: DeleteManyPageBodyHeadersInput!): DeleteManyResponse!
  createOnePageBodyFooter(input: CreateOnePageBodyFooterInput!): PageBodyFooter!
  createManyPageBodyFooters(input: CreateManyPageBodyFootersInput!): [PageBodyFooter!]!
  updateOnePageBodyFooter(input: UpdateOnePageBodyFooterInput!): PageBodyFooter!
  updateManyPageBodyFooters(input: UpdateManyPageBodyFootersInput!): UpdateManyResponse!
  deleteOnePageBodyFooter(input: DeleteOnePageBodyFooterInput!): PageBodyFooterDeleteResponse!
  deleteManyPageBodyFooters(input: DeleteManyPageBodyFootersInput!): DeleteManyResponse!
  createOnePageBodyMain(input: CreateOnePageBodyMainInput!): PageBodyMain!
  createManyPageBodyMains(input: CreateManyPageBodyMainsInput!): [PageBodyMain!]!
  updateOnePageBodyMain(input: UpdateOnePageBodyMainInput!): PageBodyMain!
  updateManyPageBodyMains(input: UpdateManyPageBodyMainsInput!): UpdateManyResponse!
  deleteOnePageBodyMain(input: DeleteOnePageBodyMainInput!): PageBodyMainDeleteResponse!
  deleteManyPageBodyMains(input: DeleteManyPageBodyMainsInput!): DeleteManyResponse!
  addItemsToPageBodyNavigation(input: AddItemsToPageBodyNavigationInput!): PageBodyNavigation!
  setItemsOnPageBodyNavigation(input: SetItemsOnPageBodyNavigationInput!): PageBodyNavigation!
  createOnePageBodyNavigation(input: CreateOnePageBodyNavigationInput!): PageBodyNavigation!
  createManyPageBodyNavigations(input: CreateManyPageBodyNavigationsInput!): [PageBodyNavigation!]!
  updateOnePageBodyNavigation(input: UpdateOnePageBodyNavigationInput!): PageBodyNavigation!
  updateManyPageBodyNavigations(input: UpdateManyPageBodyNavigationsInput!): UpdateManyResponse!
  deleteOnePageBodyNavigation(input: DeleteOnePageBodyNavigationInput!): PageBodyNavigationDeleteResponse!
  deleteManyPageBodyNavigations(input: DeleteManyPageBodyNavigationsInput!): DeleteManyResponse!
  createOnePageBodySidebar(input: CreateOnePageBodySidebarInput!): PageBodySidebar!
  createManyPageBodySidebars(input: CreateManyPageBodySidebarsInput!): [PageBodySidebar!]!
  updateOnePageBodySidebar(input: UpdateOnePageBodySidebarInput!): PageBodySidebar!
  updateManyPageBodySidebars(input: UpdateManyPageBodySidebarsInput!): UpdateManyResponse!
  deleteOnePageBodySidebar(input: DeleteOnePageBodySidebarInput!): PageBodySidebarDeleteResponse!
  deleteManyPageBodySidebars(input: DeleteManyPageBodySidebarsInput!): DeleteManyResponse!
  createOneCommonA(input: CreateOneCommonAInput!): CommonA!
  createManyCommonAS(input: CreateManyCommonASInput!): [CommonA!]!
  updateOneCommonA(input: UpdateOneCommonAInput!): CommonA!
  updateManyCommonAS(input: UpdateManyCommonASInput!): UpdateManyResponse!
  deleteOneCommonA(input: DeleteOneCommonAInput!): CommonADeleteResponse!
  deleteManyCommonAS(input: DeleteManyCommonASInput!): DeleteManyResponse!
}

input SetHeadOnPageInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetBodyOnPageInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOnePageInput {
  """The record to create"""
  page: CreatePage!
}

input CreatePage {
  id: ID
  created: DateTime
  updated_at: DateTime
  lang: String
}

input CreateManyPagesInput {
  """Array of records to create"""
  pages: [CreatePage!]!
}

input UpdateOnePageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePage!
}

input UpdatePage {
  id: ID
  created: DateTime
  updated_at: DateTime
  lang: String
}

input UpdateManyPagesInput {
  """Filter used to find fields to update"""
  filter: PageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePage!
}

input PageUpdateFilter {
  and: [PageUpdateFilter!]
  or: [PageUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOnePageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPagesInput {
  """Filter to find records to delete"""
  filter: PageDeleteFilter!
}

input PageDeleteFilter {
  and: [PageDeleteFilter!]
  or: [PageDeleteFilter!]
  id: IDFilterComparison
}

input SetMetaOnPageHeadInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOnePageHeadInput {
  """The record to create"""
  pageHead: CreatePageHead!
}

input CreatePageHead {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input CreateManyPageHeadsInput {
  """Array of records to create"""
  pageHeads: [CreatePageHead!]!
}

input UpdateOnePageHeadInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePageHead!
}

input UpdatePageHead {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input UpdateManyPageHeadsInput {
  """Filter used to find fields to update"""
  filter: PageHeadUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePageHead!
}

input PageHeadUpdateFilter {
  and: [PageHeadUpdateFilter!]
  or: [PageHeadUpdateFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
}

input DeleteOnePageHeadInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPageHeadsInput {
  """Filter to find records to delete"""
  filter: PageHeadDeleteFilter!
}

input PageHeadDeleteFilter {
  and: [PageHeadDeleteFilter!]
  or: [PageHeadDeleteFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
}

input CreateOnePageHeadMetaInput {
  """The record to create"""
  pageHeadMeta: CreatePageHeadMeta!
}

input CreatePageHeadMeta {
  id: ID
  created: DateTime
  updated_at: DateTime
  charset: String
  description: String
  noindex: Boolean
  nofollow: Boolean
  viewport: String
}

input CreateManyPageHeadMetasInput {
  """Array of records to create"""
  pageHeadMetas: [CreatePageHeadMeta!]!
}

input UpdateOnePageHeadMetaInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePageHeadMeta!
}

input UpdatePageHeadMeta {
  id: ID
  created: DateTime
  updated_at: DateTime
  charset: String
  description: String
  noindex: Boolean
  nofollow: Boolean
  viewport: String
}

input UpdateManyPageHeadMetasInput {
  """Filter used to find fields to update"""
  filter: PageHeadMetaUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePageHeadMeta!
}

input PageHeadMetaUpdateFilter {
  and: [PageHeadMetaUpdateFilter!]
  or: [PageHeadMetaUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOnePageHeadMetaInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPageHeadMetasInput {
  """Filter to find records to delete"""
  filter: PageHeadMetaDeleteFilter!
}

input PageHeadMetaDeleteFilter {
  and: [PageHeadMetaDeleteFilter!]
  or: [PageHeadMetaDeleteFilter!]
  id: IDFilterComparison
}

input SetHeaderOnPageBodyInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetNavigationOnPageBodyInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetMainOnPageBodyInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetSidebarOnPageBodyInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetFooterOnPageBodyInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOnePageBodyInput {
  """The record to create"""
  pageBody: CreatePageBody!
}

input CreatePageBody {
  id: ID
  created: DateTime
  updated_at: DateTime
}

input CreateManyPageBodiesInput {
  """Array of records to create"""
  pageBodies: [CreatePageBody!]!
}

input UpdateOnePageBodyInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePageBody!
}

input UpdatePageBody {
  id: ID
  created: DateTime
  updated_at: DateTime
}

input UpdateManyPageBodiesInput {
  """Filter used to find fields to update"""
  filter: PageBodyUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePageBody!
}

input PageBodyUpdateFilter {
  and: [PageBodyUpdateFilter!]
  or: [PageBodyUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOnePageBodyInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPageBodiesInput {
  """Filter to find records to delete"""
  filter: PageBodyDeleteFilter!
}

input PageBodyDeleteFilter {
  and: [PageBodyDeleteFilter!]
  or: [PageBodyDeleteFilter!]
  id: IDFilterComparison
}

input CreateOnePageBodyHeaderInput {
  """The record to create"""
  pageBodyHeader: CreatePageBodyHeader!
}

input CreatePageBodyHeader {
  id: ID
  created: DateTime
  updated_at: DateTime
  type: String
}

input CreateManyPageBodyHeadersInput {
  """Array of records to create"""
  pageBodyHeaders: [CreatePageBodyHeader!]!
}

input UpdateOnePageBodyHeaderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePageBodyHeader!
}

input UpdatePageBodyHeader {
  id: ID
  created: DateTime
  updated_at: DateTime
  type: String
}

input UpdateManyPageBodyHeadersInput {
  """Filter used to find fields to update"""
  filter: PageBodyHeaderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePageBodyHeader!
}

input PageBodyHeaderUpdateFilter {
  and: [PageBodyHeaderUpdateFilter!]
  or: [PageBodyHeaderUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOnePageBodyHeaderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPageBodyHeadersInput {
  """Filter to find records to delete"""
  filter: PageBodyHeaderDeleteFilter!
}

input PageBodyHeaderDeleteFilter {
  and: [PageBodyHeaderDeleteFilter!]
  or: [PageBodyHeaderDeleteFilter!]
  id: IDFilterComparison
}

input CreateOnePageBodyFooterInput {
  """The record to create"""
  pageBodyFooter: CreatePageBodyFooter!
}

input CreatePageBodyFooter {
  id: ID
  created: DateTime
  updated_at: DateTime
  type: String
}

input CreateManyPageBodyFootersInput {
  """Array of records to create"""
  pageBodyFooters: [CreatePageBodyFooter!]!
}

input UpdateOnePageBodyFooterInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePageBodyFooter!
}

input UpdatePageBodyFooter {
  id: ID
  created: DateTime
  updated_at: DateTime
  type: String
}

input UpdateManyPageBodyFootersInput {
  """Filter used to find fields to update"""
  filter: PageBodyFooterUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePageBodyFooter!
}

input PageBodyFooterUpdateFilter {
  and: [PageBodyFooterUpdateFilter!]
  or: [PageBodyFooterUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOnePageBodyFooterInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPageBodyFootersInput {
  """Filter to find records to delete"""
  filter: PageBodyFooterDeleteFilter!
}

input PageBodyFooterDeleteFilter {
  and: [PageBodyFooterDeleteFilter!]
  or: [PageBodyFooterDeleteFilter!]
  id: IDFilterComparison
}

input CreateOnePageBodyMainInput {
  """The record to create"""
  pageBodyMain: CreatePageBodyMain!
}

input CreatePageBodyMain {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input CreateManyPageBodyMainsInput {
  """Array of records to create"""
  pageBodyMains: [CreatePageBodyMain!]!
}

input UpdateOnePageBodyMainInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePageBodyMain!
}

input UpdatePageBodyMain {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input UpdateManyPageBodyMainsInput {
  """Filter used to find fields to update"""
  filter: PageBodyMainUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePageBodyMain!
}

input PageBodyMainUpdateFilter {
  and: [PageBodyMainUpdateFilter!]
  or: [PageBodyMainUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOnePageBodyMainInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPageBodyMainsInput {
  """Filter to find records to delete"""
  filter: PageBodyMainDeleteFilter!
}

input PageBodyMainDeleteFilter {
  and: [PageBodyMainDeleteFilter!]
  or: [PageBodyMainDeleteFilter!]
  id: IDFilterComparison
}

input AddItemsToPageBodyNavigationInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetItemsOnPageBodyNavigationInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOnePageBodyNavigationInput {
  """The record to create"""
  pageBodyNavigation: CreatePageBodyNavigation!
}

input CreatePageBodyNavigation {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input CreateManyPageBodyNavigationsInput {
  """Array of records to create"""
  pageBodyNavigations: [CreatePageBodyNavigation!]!
}

input UpdateOnePageBodyNavigationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePageBodyNavigation!
}

input UpdatePageBodyNavigation {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input UpdateManyPageBodyNavigationsInput {
  """Filter used to find fields to update"""
  filter: PageBodyNavigationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePageBodyNavigation!
}

input PageBodyNavigationUpdateFilter {
  and: [PageBodyNavigationUpdateFilter!]
  or: [PageBodyNavigationUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOnePageBodyNavigationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPageBodyNavigationsInput {
  """Filter to find records to delete"""
  filter: PageBodyNavigationDeleteFilter!
}

input PageBodyNavigationDeleteFilter {
  and: [PageBodyNavigationDeleteFilter!]
  or: [PageBodyNavigationDeleteFilter!]
  id: IDFilterComparison
}

input CreateOnePageBodySidebarInput {
  """The record to create"""
  pageBodySidebar: CreatePageBodySidebar!
}

input CreatePageBodySidebar {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input CreateManyPageBodySidebarsInput {
  """Array of records to create"""
  pageBodySidebars: [CreatePageBodySidebar!]!
}

input UpdateOnePageBodySidebarInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePageBodySidebar!
}

input UpdatePageBodySidebar {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input UpdateManyPageBodySidebarsInput {
  """Filter used to find fields to update"""
  filter: PageBodySidebarUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePageBodySidebar!
}

input PageBodySidebarUpdateFilter {
  and: [PageBodySidebarUpdateFilter!]
  or: [PageBodySidebarUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOnePageBodySidebarInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPageBodySidebarsInput {
  """Filter to find records to delete"""
  filter: PageBodySidebarDeleteFilter!
}

input PageBodySidebarDeleteFilter {
  and: [PageBodySidebarDeleteFilter!]
  or: [PageBodySidebarDeleteFilter!]
  id: IDFilterComparison
}

input CreateOneCommonAInput {
  """The record to create"""
  commonA: CreateCommonA!
}

input CreateCommonA {
  id: ID
  created: DateTime
  updated_at: DateTime
  href: String
  rel: RelEnum
  target: TargetEnum
}

input CreateManyCommonASInput {
  """Array of records to create"""
  commonAS: [CreateCommonA!]!
}

input UpdateOneCommonAInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCommonA!
}

input UpdateCommonA {
  id: ID
  created: DateTime
  updated_at: DateTime
  href: String
  rel: RelEnum
  target: TargetEnum
}

input UpdateManyCommonASInput {
  """Filter used to find fields to update"""
  filter: CommonAUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCommonA!
}

input CommonAUpdateFilter {
  and: [CommonAUpdateFilter!]
  or: [CommonAUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOneCommonAInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyCommonASInput {
  """Filter to find records to delete"""
  filter: CommonADeleteFilter!
}

input CommonADeleteFilter {
  and: [CommonADeleteFilter!]
  or: [CommonADeleteFilter!]
  id: IDFilterComparison
}