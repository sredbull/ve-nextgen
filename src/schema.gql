# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Float!
  provider: String!
  providerId: String!
  username: String!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type meta {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  charset: String!
  description: String!
  noindex: Boolean!
  nofollow: Boolean!
  viewport: String!
}

type head {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
  meta: meta!
}

type page_body_header {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  type: String!
}

type CommonA {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  href: String!
  rel: RelEnum!
  target: TargetEnum!
}

enum RelEnum {
  ALTERNATE
  AUTHOR
  BOOKMARK
  EXTERNAL
  HELP
  LICENSE
  NEXT
  NOFOLLOW
  NOREFERRER
  NOOPENER
  PREV
  SEARCH
  TAG
}

enum TargetEnum {
  BLANK
  PARENT
  SELF
  TOP
}

type PageBodyNavigation {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
  items(
    """Specify to filter the records returned."""
    filter: CommonAFilter = {}

    """Specify to sort results."""
    sorting: [CommonASort!] = []
  ): [CommonA!]
}

input CommonAFilter {
  and: [CommonAFilter!]
  or: [CommonAFilter!]
  id: IDFilterComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input CommonASort {
  field: CommonASortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CommonASortFields {
  id
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type sidebar {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
}

type page_body_footer {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  type: String!
}

type main {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
}

type body {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  header: HeaderUnion!
  navigation: PageBodyNavigation!
  main: main!
  sidebar: sidebar!
  footer: FooterUnion!
}

union HeaderUnion = page_body_header_curved | page_body_header_skewed

type page_body_header_curved {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
  subTitle: String!
}

type page_body_header_skewed {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
  subTitle: String!
}

union FooterUnion = page_body_footer_extended | page_body_footer_simple

type page_body_footer_extended {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
  subTitle: String!
  copyright: String!
}

type page_body_footer_simple {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  title: String!
  subTitle: String!
  copyright: String!
}

type page {
  id: ID!
  created: DateTime!
  updated_at: DateTime!
  lang: String!
  head: head!
  body: body!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type PageDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  lang: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type pageEdge {
  """The node containing the page"""
  node: page!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type PageConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [pageEdge!]!
}

type pageAggregateGroupBy {
  id: ID
}

type pageCountAggregate {
  id: Int
}

type pageSumAggregate {
  id: Float
}

type pageAvgAggregate {
  id: Float
}

type pageMinAggregate {
  id: ID
}

type pageMaxAggregate {
  id: ID
}

type HeadDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

type headEdge {
  """The node containing the head"""
  node: head!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type HeadConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [headEdge!]!
}

type headAggregateGroupBy {
  id: ID
  title: String
}

type headCountAggregate {
  id: Int
  title: Int
}

type headSumAggregate {
  id: Float
}

type headAvgAggregate {
  id: Float
}

type headMinAggregate {
  id: ID
  title: String
}

type headMaxAggregate {
  id: ID
  title: String
}

type MetaDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  charset: String
  description: String
  noindex: Boolean
  nofollow: Boolean
  viewport: String
}

type metaEdge {
  """The node containing the meta"""
  node: meta!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type MetaConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [metaEdge!]!
}

type metaAggregateGroupBy {
  id: ID
}

type metaCountAggregate {
  id: Int
}

type metaSumAggregate {
  id: Float
}

type metaAvgAggregate {
  id: Float
}

type metaMinAggregate {
  id: ID
}

type metaMaxAggregate {
  id: ID
}

type BodyDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
}

type bodyEdge {
  """The node containing the body"""
  node: body!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type BodyConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [bodyEdge!]!
}

type bodyAggregateGroupBy {
  id: ID
}

type bodyCountAggregate {
  id: Int
}

type bodySumAggregate {
  id: Float
}

type bodyAvgAggregate {
  id: Float
}

type bodyMinAggregate {
  id: ID
}

type bodyMaxAggregate {
  id: ID
}

type Page_body_headerDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  type: String
}

type page_body_headerEdge {
  """The node containing the page_body_header"""
  node: page_body_header!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type Page_body_headerConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [page_body_headerEdge!]!
}

type page_body_headerAggregateGroupBy {
  id: ID
}

type page_body_headerCountAggregate {
  id: Int
}

type page_body_headerSumAggregate {
  id: Float
}

type page_body_headerAvgAggregate {
  id: Float
}

type page_body_headerMinAggregate {
  id: ID
}

type page_body_headerMaxAggregate {
  id: ID
}

type Page_body_footerDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  type: String
}

type page_body_footerEdge {
  """The node containing the page_body_footer"""
  node: page_body_footer!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type Page_body_footerConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [page_body_footerEdge!]!
}

type page_body_footerAggregateGroupBy {
  id: ID
}

type page_body_footerCountAggregate {
  id: Int
}

type page_body_footerSumAggregate {
  id: Float
}

type page_body_footerAvgAggregate {
  id: Float
}

type page_body_footerMinAggregate {
  id: ID
}

type page_body_footerMaxAggregate {
  id: ID
}

type MainDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

type mainEdge {
  """The node containing the main"""
  node: main!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type MainConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [mainEdge!]!
}

type mainAggregateGroupBy {
  id: ID
}

type mainCountAggregate {
  id: Int
}

type mainSumAggregate {
  id: Float
}

type mainAvgAggregate {
  id: Float
}

type mainMinAggregate {
  id: ID
}

type mainMaxAggregate {
  id: ID
}

type PageBodyNavigationDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

type PageBodyNavigationEdge {
  """The node containing the PageBodyNavigation"""
  node: PageBodyNavigation!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageBodyNavigationConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PageBodyNavigationEdge!]!
}

type PageBodyNavigationAggregateGroupBy {
  id: ID
}

type PageBodyNavigationCountAggregate {
  id: Int
}

type PageBodyNavigationSumAggregate {
  id: Float
}

type PageBodyNavigationAvgAggregate {
  id: Float
}

type PageBodyNavigationMinAggregate {
  id: ID
}

type PageBodyNavigationMaxAggregate {
  id: ID
}

type SidebarDeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

type sidebarEdge {
  """The node containing the sidebar"""
  node: sidebar!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type SidebarConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [sidebarEdge!]!
}

type sidebarAggregateGroupBy {
  id: ID
}

type sidebarCountAggregate {
  id: Int
}

type sidebarSumAggregate {
  id: Float
}

type sidebarAvgAggregate {
  id: Float
}

type sidebarMinAggregate {
  id: ID
}

type sidebarMaxAggregate {
  id: ID
}

type CommonADeleteResponse {
  id: ID
  created: DateTime
  updated_at: DateTime
  href: String
  rel: RelEnum
  target: TargetEnum
}

type CommonAEdge {
  """The node containing the CommonA"""
  node: CommonA!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type CommonAConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [CommonAEdge!]!
}

type CommonAAggregateGroupBy {
  id: ID
}

type CommonACountAggregate {
  id: Int
}

type CommonASumAggregate {
  id: Float
}

type CommonAAvgAggregate {
  id: Float
}

type CommonAMinAggregate {
  id: ID
}

type CommonAMaxAggregate {
  id: ID
}

type Query {
  users: [User!]!
  whoAmI: User!
  page(
    """The id of the record to find."""
    id: ID!
  ): page
  pages(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: pageFilter = {}

    """Specify to sort results."""
    sorting: [pageSort!] = []
  ): PageConnection!
  head(
    """The id of the record to find."""
    id: ID!
  ): head
  heads(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: headFilter = {}

    """Specify to sort results."""
    sorting: [headSort!] = []
  ): HeadConnection!
  meta(
    """The id of the record to find."""
    id: ID!
  ): meta
  metas(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: metaFilter = {}

    """Specify to sort results."""
    sorting: [metaSort!] = []
  ): MetaConnection!
  body(
    """The id of the record to find."""
    id: ID!
  ): body
  bodies(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: bodyFilter = {}

    """Specify to sort results."""
    sorting: [bodySort!] = []
  ): BodyConnection!
  page_body_header(
    """The id of the record to find."""
    id: ID!
  ): page_body_header
  page_body_headers(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: page_body_headerFilter = {}

    """Specify to sort results."""
    sorting: [page_body_headerSort!] = []
  ): Page_body_headerConnection!
  page_body_footer(
    """The id of the record to find."""
    id: ID!
  ): page_body_footer
  page_body_footers(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: page_body_footerFilter = {}

    """Specify to sort results."""
    sorting: [page_body_footerSort!] = []
  ): Page_body_footerConnection!
  main(
    """The id of the record to find."""
    id: ID!
  ): main
  mains(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: mainFilter = {}

    """Specify to sort results."""
    sorting: [mainSort!] = []
  ): MainConnection!
  pageBodyNavigation(
    """The id of the record to find."""
    id: ID!
  ): PageBodyNavigation
  pageBodyNavigations(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PageBodyNavigationFilter = {}

    """Specify to sort results."""
    sorting: [PageBodyNavigationSort!] = []
  ): PageBodyNavigationConnection!
  sidebar(
    """The id of the record to find."""
    id: ID!
  ): sidebar
  sidebars(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: sidebarFilter = {}

    """Specify to sort results."""
    sorting: [sidebarSort!] = []
  ): SidebarConnection!
  commonA(
    """The id of the record to find."""
    id: ID!
  ): CommonA
  commonAS(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: CommonAFilter = {}

    """Specify to sort results."""
    sorting: [CommonASort!] = []
  ): CommonAConnection!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input pageFilter {
  and: [pageFilter!]
  or: [pageFilter!]
  id: IDFilterComparison
}

input pageSort {
  field: pageSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum pageSortFields {
  id
}

input headFilter {
  and: [headFilter!]
  or: [headFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input headSort {
  field: headSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum headSortFields {
  id
  title
}

input metaFilter {
  and: [metaFilter!]
  or: [metaFilter!]
  id: IDFilterComparison
}

input metaSort {
  field: metaSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum metaSortFields {
  id
}

input bodyFilter {
  and: [bodyFilter!]
  or: [bodyFilter!]
  id: IDFilterComparison
}

input bodySort {
  field: bodySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum bodySortFields {
  id
}

input page_body_headerFilter {
  and: [page_body_headerFilter!]
  or: [page_body_headerFilter!]
  id: IDFilterComparison
}

input page_body_headerSort {
  field: page_body_headerSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum page_body_headerSortFields {
  id
}

input page_body_footerFilter {
  and: [page_body_footerFilter!]
  or: [page_body_footerFilter!]
  id: IDFilterComparison
}

input page_body_footerSort {
  field: page_body_footerSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum page_body_footerSortFields {
  id
}

input mainFilter {
  and: [mainFilter!]
  or: [mainFilter!]
  id: IDFilterComparison
}

input mainSort {
  field: mainSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum mainSortFields {
  id
}

input PageBodyNavigationFilter {
  and: [PageBodyNavigationFilter!]
  or: [PageBodyNavigationFilter!]
  id: IDFilterComparison
}

input PageBodyNavigationSort {
  field: PageBodyNavigationSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PageBodyNavigationSortFields {
  id
}

input sidebarFilter {
  and: [sidebarFilter!]
  or: [sidebarFilter!]
  id: IDFilterComparison
}

input sidebarSort {
  field: sidebarSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum sidebarSortFields {
  id
}

type Mutation {
  setHeadOnPage(input: SetHeadOnPageInput!): page!
  setBodyOnPage(input: SetBodyOnPageInput!): page!
  createOnePage(input: CreateOnePageInput!): page!
  createManyPages(input: CreateManyPagesInput!): [page!]!
  updateOnePage(input: UpdateOnePageInput!): page!
  updateManyPages(input: UpdateManyPagesInput!): UpdateManyResponse!
  deleteOnePage(input: DeleteOnePageInput!): PageDeleteResponse!
  deleteManyPages(input: DeleteManyPagesInput!): DeleteManyResponse!
  setMetaOnHead(input: SetMetaOnHeadInput!): head!
  createOneHead(input: CreateOneHeadInput!): head!
  createManyHeads(input: CreateManyHeadsInput!): [head!]!
  updateOneHead(input: UpdateOneHeadInput!): head!
  updateManyHeads(input: UpdateManyHeadsInput!): UpdateManyResponse!
  deleteOneHead(input: DeleteOneHeadInput!): HeadDeleteResponse!
  deleteManyHeads(input: DeleteManyHeadsInput!): DeleteManyResponse!
  createOneMeta(input: CreateOneMetaInput!): meta!
  createManyMetas(input: CreateManyMetasInput!): [meta!]!
  updateOneMeta(input: UpdateOneMetaInput!): meta!
  updateManyMetas(input: UpdateManyMetasInput!): UpdateManyResponse!
  deleteOneMeta(input: DeleteOneMetaInput!): MetaDeleteResponse!
  deleteManyMetas(input: DeleteManyMetasInput!): DeleteManyResponse!
  setHeaderOnBody(input: SetHeaderOnBodyInput!): body!
  setNavigationOnBody(input: SetNavigationOnBodyInput!): body!
  setMainOnBody(input: SetMainOnBodyInput!): body!
  setSidebarOnBody(input: SetSidebarOnBodyInput!): body!
  setFooterOnBody(input: SetFooterOnBodyInput!): body!
  createOneBody(input: CreateOneBodyInput!): body!
  createManyBodies(input: CreateManyBodiesInput!): [body!]!
  updateOneBody(input: UpdateOneBodyInput!): body!
  updateManyBodies(input: UpdateManyBodiesInput!): UpdateManyResponse!
  deleteOneBody(input: DeleteOneBodyInput!): BodyDeleteResponse!
  deleteManyBodies(input: DeleteManyBodiesInput!): DeleteManyResponse!
  createOnePage_body_header(input: CreateOnePage_body_headerInput!): page_body_header!
  createManyPage_body_headers(input: CreateManyPage_body_headersInput!): [page_body_header!]!
  updateOnePage_body_header(input: UpdateOnePage_body_headerInput!): page_body_header!
  updateManyPage_body_headers(input: UpdateManyPage_body_headersInput!): UpdateManyResponse!
  deleteOnePage_body_header(input: DeleteOnePage_body_headerInput!): Page_body_headerDeleteResponse!
  deleteManyPage_body_headers(input: DeleteManyPage_body_headersInput!): DeleteManyResponse!
  createOnePage_body_footer(input: CreateOnePage_body_footerInput!): page_body_footer!
  createManyPage_body_footers(input: CreateManyPage_body_footersInput!): [page_body_footer!]!
  updateOnePage_body_footer(input: UpdateOnePage_body_footerInput!): page_body_footer!
  updateManyPage_body_footers(input: UpdateManyPage_body_footersInput!): UpdateManyResponse!
  deleteOnePage_body_footer(input: DeleteOnePage_body_footerInput!): Page_body_footerDeleteResponse!
  deleteManyPage_body_footers(input: DeleteManyPage_body_footersInput!): DeleteManyResponse!
  createOneMain(input: CreateOneMainInput!): main!
  createManyMains(input: CreateManyMainsInput!): [main!]!
  updateOneMain(input: UpdateOneMainInput!): main!
  updateManyMains(input: UpdateManyMainsInput!): UpdateManyResponse!
  deleteOneMain(input: DeleteOneMainInput!): MainDeleteResponse!
  deleteManyMains(input: DeleteManyMainsInput!): DeleteManyResponse!
  addItemsToPageBodyNavigation(input: AddItemsToPageBodyNavigationInput!): PageBodyNavigation!
  setItemsOnPageBodyNavigation(input: SetItemsOnPageBodyNavigationInput!): PageBodyNavigation!
  createOnePageBodyNavigation(input: CreateOnePageBodyNavigationInput!): PageBodyNavigation!
  createManyPageBodyNavigations(input: CreateManyPageBodyNavigationsInput!): [PageBodyNavigation!]!
  updateOnePageBodyNavigation(input: UpdateOnePageBodyNavigationInput!): PageBodyNavigation!
  updateManyPageBodyNavigations(input: UpdateManyPageBodyNavigationsInput!): UpdateManyResponse!
  deleteOnePageBodyNavigation(input: DeleteOnePageBodyNavigationInput!): PageBodyNavigationDeleteResponse!
  deleteManyPageBodyNavigations(input: DeleteManyPageBodyNavigationsInput!): DeleteManyResponse!
  createOneSidebar(input: CreateOneSidebarInput!): sidebar!
  createManySidebars(input: CreateManySidebarsInput!): [sidebar!]!
  updateOneSidebar(input: UpdateOneSidebarInput!): sidebar!
  updateManySidebars(input: UpdateManySidebarsInput!): UpdateManyResponse!
  deleteOneSidebar(input: DeleteOneSidebarInput!): SidebarDeleteResponse!
  deleteManySidebars(input: DeleteManySidebarsInput!): DeleteManyResponse!
  createOneCommonA(input: CreateOneCommonAInput!): CommonA!
  createManyCommonAS(input: CreateManyCommonASInput!): [CommonA!]!
  updateOneCommonA(input: UpdateOneCommonAInput!): CommonA!
  updateManyCommonAS(input: UpdateManyCommonASInput!): UpdateManyResponse!
  deleteOneCommonA(input: DeleteOneCommonAInput!): CommonADeleteResponse!
  deleteManyCommonAS(input: DeleteManyCommonASInput!): DeleteManyResponse!
}

input SetHeadOnPageInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetBodyOnPageInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOnePageInput {
  """The record to create"""
  page: CreatePage!
}

input CreatePage {
  id: ID
  created: DateTime
  updated_at: DateTime
  lang: String
}

input CreateManyPagesInput {
  """Array of records to create"""
  pages: [CreatePage!]!
}

input UpdateOnePageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePage!
}

input UpdatePage {
  id: ID
  created: DateTime
  updated_at: DateTime
  lang: String
}

input UpdateManyPagesInput {
  """Filter used to find fields to update"""
  filter: pageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePage!
}

input pageUpdateFilter {
  and: [pageUpdateFilter!]
  or: [pageUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOnePageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPagesInput {
  """Filter to find records to delete"""
  filter: pageDeleteFilter!
}

input pageDeleteFilter {
  and: [pageDeleteFilter!]
  or: [pageDeleteFilter!]
  id: IDFilterComparison
}

input SetMetaOnHeadInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneHeadInput {
  """The record to create"""
  head: CreateHead!
}

input CreateHead {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input CreateManyHeadsInput {
  """Array of records to create"""
  heads: [CreateHead!]!
}

input UpdateOneHeadInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateHead!
}

input UpdateHead {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input UpdateManyHeadsInput {
  """Filter used to find fields to update"""
  filter: headUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateHead!
}

input headUpdateFilter {
  and: [headUpdateFilter!]
  or: [headUpdateFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
}

input DeleteOneHeadInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyHeadsInput {
  """Filter to find records to delete"""
  filter: headDeleteFilter!
}

input headDeleteFilter {
  and: [headDeleteFilter!]
  or: [headDeleteFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
}

input CreateOneMetaInput {
  """The record to create"""
  meta: CreateMeta!
}

input CreateMeta {
  id: ID
  created: DateTime
  updated_at: DateTime
  charset: String
  description: String
  noindex: Boolean
  nofollow: Boolean
  viewport: String
}

input CreateManyMetasInput {
  """Array of records to create"""
  metas: [CreateMeta!]!
}

input UpdateOneMetaInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateMeta!
}

input UpdateMeta {
  id: ID
  created: DateTime
  updated_at: DateTime
  charset: String
  description: String
  noindex: Boolean
  nofollow: Boolean
  viewport: String
}

input UpdateManyMetasInput {
  """Filter used to find fields to update"""
  filter: metaUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateMeta!
}

input metaUpdateFilter {
  and: [metaUpdateFilter!]
  or: [metaUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOneMetaInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyMetasInput {
  """Filter to find records to delete"""
  filter: metaDeleteFilter!
}

input metaDeleteFilter {
  and: [metaDeleteFilter!]
  or: [metaDeleteFilter!]
  id: IDFilterComparison
}

input SetHeaderOnBodyInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetNavigationOnBodyInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetMainOnBodyInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetSidebarOnBodyInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetFooterOnBodyInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneBodyInput {
  """The record to create"""
  body: CreateBody!
}

input CreateBody {
  id: ID
  created: DateTime
  updated_at: DateTime
}

input CreateManyBodiesInput {
  """Array of records to create"""
  bodies: [CreateBody!]!
}

input UpdateOneBodyInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBody!
}

input UpdateBody {
  id: ID
  created: DateTime
  updated_at: DateTime
}

input UpdateManyBodiesInput {
  """Filter used to find fields to update"""
  filter: bodyUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBody!
}

input bodyUpdateFilter {
  and: [bodyUpdateFilter!]
  or: [bodyUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOneBodyInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyBodiesInput {
  """Filter to find records to delete"""
  filter: bodyDeleteFilter!
}

input bodyDeleteFilter {
  and: [bodyDeleteFilter!]
  or: [bodyDeleteFilter!]
  id: IDFilterComparison
}

input CreateOnePage_body_headerInput {
  """The record to create"""
  page_body_header: CreatePage_body_header!
}

input CreatePage_body_header {
  id: ID
  created: DateTime
  updated_at: DateTime
  type: String
}

input CreateManyPage_body_headersInput {
  """Array of records to create"""
  page_body_headers: [CreatePage_body_header!]!
}

input UpdateOnePage_body_headerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePage_body_header!
}

input UpdatePage_body_header {
  id: ID
  created: DateTime
  updated_at: DateTime
  type: String
}

input UpdateManyPage_body_headersInput {
  """Filter used to find fields to update"""
  filter: page_body_headerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePage_body_header!
}

input page_body_headerUpdateFilter {
  and: [page_body_headerUpdateFilter!]
  or: [page_body_headerUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOnePage_body_headerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPage_body_headersInput {
  """Filter to find records to delete"""
  filter: page_body_headerDeleteFilter!
}

input page_body_headerDeleteFilter {
  and: [page_body_headerDeleteFilter!]
  or: [page_body_headerDeleteFilter!]
  id: IDFilterComparison
}

input CreateOnePage_body_footerInput {
  """The record to create"""
  page_body_footer: CreatePage_body_footer!
}

input CreatePage_body_footer {
  id: ID
  created: DateTime
  updated_at: DateTime
  type: String
}

input CreateManyPage_body_footersInput {
  """Array of records to create"""
  page_body_footers: [CreatePage_body_footer!]!
}

input UpdateOnePage_body_footerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePage_body_footer!
}

input UpdatePage_body_footer {
  id: ID
  created: DateTime
  updated_at: DateTime
  type: String
}

input UpdateManyPage_body_footersInput {
  """Filter used to find fields to update"""
  filter: page_body_footerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePage_body_footer!
}

input page_body_footerUpdateFilter {
  and: [page_body_footerUpdateFilter!]
  or: [page_body_footerUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOnePage_body_footerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPage_body_footersInput {
  """Filter to find records to delete"""
  filter: page_body_footerDeleteFilter!
}

input page_body_footerDeleteFilter {
  and: [page_body_footerDeleteFilter!]
  or: [page_body_footerDeleteFilter!]
  id: IDFilterComparison
}

input CreateOneMainInput {
  """The record to create"""
  main: CreateMain!
}

input CreateMain {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input CreateManyMainsInput {
  """Array of records to create"""
  mains: [CreateMain!]!
}

input UpdateOneMainInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateMain!
}

input UpdateMain {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input UpdateManyMainsInput {
  """Filter used to find fields to update"""
  filter: mainUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateMain!
}

input mainUpdateFilter {
  and: [mainUpdateFilter!]
  or: [mainUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOneMainInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyMainsInput {
  """Filter to find records to delete"""
  filter: mainDeleteFilter!
}

input mainDeleteFilter {
  and: [mainDeleteFilter!]
  or: [mainDeleteFilter!]
  id: IDFilterComparison
}

input AddItemsToPageBodyNavigationInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetItemsOnPageBodyNavigationInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOnePageBodyNavigationInput {
  """The record to create"""
  pageBodyNavigation: CreatePageBodyNavigation!
}

input CreatePageBodyNavigation {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input CreateManyPageBodyNavigationsInput {
  """Array of records to create"""
  pageBodyNavigations: [CreatePageBodyNavigation!]!
}

input UpdateOnePageBodyNavigationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePageBodyNavigation!
}

input UpdatePageBodyNavigation {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input UpdateManyPageBodyNavigationsInput {
  """Filter used to find fields to update"""
  filter: PageBodyNavigationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePageBodyNavigation!
}

input PageBodyNavigationUpdateFilter {
  and: [PageBodyNavigationUpdateFilter!]
  or: [PageBodyNavigationUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOnePageBodyNavigationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPageBodyNavigationsInput {
  """Filter to find records to delete"""
  filter: PageBodyNavigationDeleteFilter!
}

input PageBodyNavigationDeleteFilter {
  and: [PageBodyNavigationDeleteFilter!]
  or: [PageBodyNavigationDeleteFilter!]
  id: IDFilterComparison
}

input CreateOneSidebarInput {
  """The record to create"""
  sidebar: CreateSidebar!
}

input CreateSidebar {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input CreateManySidebarsInput {
  """Array of records to create"""
  sidebars: [CreateSidebar!]!
}

input UpdateOneSidebarInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSidebar!
}

input UpdateSidebar {
  id: ID
  created: DateTime
  updated_at: DateTime
  title: String
}

input UpdateManySidebarsInput {
  """Filter used to find fields to update"""
  filter: sidebarUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSidebar!
}

input sidebarUpdateFilter {
  and: [sidebarUpdateFilter!]
  or: [sidebarUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOneSidebarInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManySidebarsInput {
  """Filter to find records to delete"""
  filter: sidebarDeleteFilter!
}

input sidebarDeleteFilter {
  and: [sidebarDeleteFilter!]
  or: [sidebarDeleteFilter!]
  id: IDFilterComparison
}

input CreateOneCommonAInput {
  """The record to create"""
  commonA: CreateCommonA!
}

input CreateCommonA {
  id: ID
  created: DateTime
  updated_at: DateTime
  href: String
  rel: RelEnum
  target: TargetEnum
}

input CreateManyCommonASInput {
  """Array of records to create"""
  commonAS: [CreateCommonA!]!
}

input UpdateOneCommonAInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCommonA!
}

input UpdateCommonA {
  id: ID
  created: DateTime
  updated_at: DateTime
  href: String
  rel: RelEnum
  target: TargetEnum
}

input UpdateManyCommonASInput {
  """Filter used to find fields to update"""
  filter: CommonAUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCommonA!
}

input CommonAUpdateFilter {
  and: [CommonAUpdateFilter!]
  or: [CommonAUpdateFilter!]
  id: IDFilterComparison
}

input DeleteOneCommonAInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyCommonASInput {
  """Filter to find records to delete"""
  filter: CommonADeleteFilter!
}

input CommonADeleteFilter {
  and: [CommonADeleteFilter!]
  or: [CommonADeleteFilter!]
  id: IDFilterComparison
}